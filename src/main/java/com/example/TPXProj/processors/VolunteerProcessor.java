package com.example.TPXProj.processors;

import com.example.TPXProj.inserters.NonprofitInserter;
import com.example.TPXProj.models.Nonprofit;
import com.example.TPXProj.models.Volunteer;
import com.example.TPXProj.parsers.NonprofitParser;
import com.example.TPXProj.parsers.VolunteerParser;
import com.example.TPXProj.readers.FileReader;
import com.example.TPXProj.repositories.DatabaseNonprofitRepository;

import java.util.ArrayList;
import java.util.Comparator;
import java.util.PriorityQueue;

/**
 * Processor class to handle all requests from Database Service regarding Volunteers.
 * This includes ranking Nonprofits based on given Volunteer, and delivering html files and fallback html files.
 *
 * @author Caleb Warner
 */
public class VolunteerProcessor {
    // *************************************************************************
    // Constants
    // *************************************************************************
    /** File path to read from when Volunteer request succeeds. */
    private static final String filePath = "src/main/webapp/volunteer-submit.html";

    /** File path to read from when Volunteer request fails. */
    private static final String failureFilePath = "src/main/webapp/volunteer-submit-failure.html";


    // *************************************************************************
    // Fields
    // *************************************************************************
    /** Class variable to store the object representation of the Volunteer request. */
    private Volunteer volunteer;

    /** Class variable to store the max heap of nonprofits based on score given by rankNonprofits. */
    private PriorityQueue<Nonprofit> rankedNonprofits;


    // *************************************************************************
    // Constructors
    // *************************************************************************
    /**
     * Basic constructor used if Volunteer request is empty.
     */
    public VolunteerProcessor() {
        this.volunteer = null;
    } // public VolunteerProcessor()

    /**
     * Constructor used if Volunteer request provides needed information to rank nonprofits.
     *
     * @param formString String generated by html form
     */
    public VolunteerProcessor(String formString) {
        // Submits formString to VolunteerParser to translate form string to Volunteer object
        this.volunteer = new Volunteer(VolunteerParser.parseString(formString));
    } // public VolunteerProcessor()


    // *************************************************************************
    // Public Methods
    // *************************************************************************
    /**
     * Uses rankedNonprofits object and Nonprofit Inserter to create html object with filled in nonprofit info.
     *
     * @return String representation of html file filled with nonprofit info
     */
    public String output() {
        // Call NonprofitInserter.run() to read and fill top 4 nonprofits into html file
        return NonprofitInserter.run(rankedNonprofits, filePath);
    } // public String output()

    /**
     * Delivers String representation of failure html file if Volunteer request was empty.
     *
     * @return String of failure html file
     */
    public String failure() {
        // Call FileReader to retrieve html file
        return FileReader.readFile(failureFilePath);
    } // public String failure()

    /**
     * Retrieves all nonprofits from repository, converts them to Nonprofit objects, and ranks them in a max heap.
     * It stores this max heap in the class variable rankedNonprofits.
     *
     * @param repository Object reference to MySQL database containing all stored nonprofits
     */
    public void rankNonprofits(DatabaseNonprofitRepository repository) {
        // Create rankNonprofits max heap priority queue to keep track of highest scoring nonprofits
        PriorityQueue<Nonprofit> rankedNonprofits = new PriorityQueue<>(new Comparator<Nonprofit>() {
            @Override
            public int compare(Nonprofit o1, Nonprofit o2) {
                return - Integer.compare(o1.getScore(), o2.getScore());
            }
        });

        // Retrieve all nonprofits and utilize NonprofitParser to parse them into Nonprofit objects
        ArrayList<Nonprofit> databaseNonprofits = NonprofitParser.parseDatabase((repository.findAll()));

        // For each nonprofit from the database, score each nonprofit based on predetermined scoring system
        // Store all nonprofits into priority queue
        for (Nonprofit curNonprofit : databaseNonprofits) {
            int curScore = 0;

            // Check if location matches
            if (curNonprofit.getLocation().equals(volunteer.getLocation())) {
                curScore += 720;
            }

            // Check if needs/contributions match
            for (Integer need : curNonprofit.getNeeds()) {
                if (need.equals(volunteer.getContribution())) {
                    curScore += 360;
                }
            } // for

            // Check if time commitments/availabilities match
            for (Integer commitment : curNonprofit.getCommitments()) {
                if (commitment.equals(volunteer.getAvailability())) {
                    curScore += 180;
                }
            } // for

            // Check if activities match
            for (Integer curNonprofitActivity : curNonprofit.getActivities()) {
                for (Integer volunteerActivity : volunteer.getActivities()) {
                    if (curNonprofitActivity.equals(volunteerActivity)) {
                        curScore += 12;
                    }
                } // inner for
            } // outer for

            // Check if skills match
            for (Integer curNonprofitSkill : curNonprofit.getSkills()) {
                for (Integer volunteerSkill : volunteer.getSkills()) {
                    if (curNonprofitSkill.equals(volunteerSkill)) {
                        curScore++;
                    }
                } // inner for
            } // outer for

            // Store score in Nonprofit object
            curNonprofit.setScore(curScore);

            // Add nonprofit to priority queue
            rankedNonprofits.add(curNonprofit);
        } // for each

        // Store priority queue in class variable
        this.rankedNonprofits = rankedNonprofits;
    } // public void rankNonprofits()
} // public class VolunteerProcessor
