package com.example.TPXProj.services;

import com.example.TPXProj.models.DatabaseNonprofit;
import com.example.TPXProj.models.Nonprofit;
import com.example.TPXProj.parsers.NonprofitParser;
import com.example.TPXProj.processors.NonprofitProcessor;
import com.example.TPXProj.processors.VolunteerProcessor;
import com.example.TPXProj.repositories.DatabaseNonprofitRepository;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import java.util.ArrayList;

/**
 * Service class that allows custom mappings to various addresses
 *
 * @author Caleb Warner
 */
@RestController
public class DatabaseService {
    // *************************************************************************
    // Fields
    // *************************************************************************
    /** Reference to the database object that communicates with the ClearDB MySQL Database. */
    @Autowired
    private DatabaseNonprofitRepository repository;


    // *************************************************************************
    // Public Methods
    // *************************************************************************
    /**
     * Maps the address /api/nonprofits to a plain json object returned by the database consisting of all
     * nonprofits stored in the database.
     *
     * @return All nonprofits in the database in JSON format
     */
    @GetMapping("/api/nonprofits")
    public Iterable<DatabaseNonprofit> findAllNonProfits() {
        return repository.findAll();
    } // public Iterable<DatabaseNonprofit> findAllNonProfits()

    /**
     * Maps the address /api/nonprofits/formatted to a plain text page consisting of all info bits (separated by break) of all nonprofits
     * in the database (separated by 2 breaks).
     *
     * @return All nonprofits in the database in text format
     */
    @GetMapping("/api/nonprofits/formatted")
    public String printNonprofits() {
        // Retrieve, parse, and store all nonprofits in an arraylist
        ArrayList<Nonprofit> nonprofitArrayList = NonprofitParser.parseDatabase(repository.findAll());

        // Iterate through arraylist and format/append each one to String output
        StringBuilder output = new StringBuilder();
        for (Nonprofit nonprofit : nonprofitArrayList) {
            output.append(nonprofit.printNonprofit());
            output.append("<br><br>");
        } // for

        return output.toString();
    } // public String printNonprofits()

    /**
     * Takes the post request from the formString and uses VolunteerProcessor to return an html file of the
     * top 4 nonprofits produced by VolunteerProcessor
     *
     * @param formString String generated by html form; found in the post request
     * @return Filled in html volunteer-submit.html file with top 4 nonprofits
     */
    @PostMapping("/volunteer-submit.html")
    public String serviceVolunteer(@RequestBody String formString) {
        // Call VolunteerProcessor methods to handle request
        VolunteerProcessor vp = new VolunteerProcessor(formString);
        vp.rankNonprofits(repository);
        return vp.output();
    } // public String serviceVolunteer()

    /**
     * Takes the post request from the formString and uses NonprofitProcessor to save the nonprofit to the database.
     * Returns the confirmation page html file.
     * Returns an error html file if failure (bad formString)
     *
     * @param formString String generated by html form; found in the post request
     * @return Html file of either success or failure confirmation
     */
    @PostMapping("/nonprofit-submit.html")
    public String serviceNonprofit(@RequestBody String formString) {
        // Call NonprofitProcessor methods to handle request
        NonprofitProcessor np = new NonprofitProcessor(formString);
        if (np.saveNonprofit(repository)) {
            return np.output();
        }

        // If invalid nonprofit is submitted, serve error html file
        return np.error();
    } // public String serviceNonprofit()
} // public class DatabaseService
